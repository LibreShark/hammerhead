syntax = "proto3";

import "google/protobuf/timestamp.proto";

package libreshark.hammerhead;
option csharp_namespace = "LibreShark.Hammerhead";

message RomRange {
  uint32 start_index = 1;
  uint32 end_index = 2;
  uint32 length = 3;
  bytes raw_bytes = 4;
}

// TODO(CheatoBaggins): Create ranges for parsed values to aid debugging.
message RomString {
  RomRange addr = 1;
  string value = 2;
}
message RomU8 {
  RomRange addr = 1;
  uint32 value = 2;
}
message RomU16 {
  RomRange addr = 1;
  uint32 value = 2;
}
message RomU32 {
  RomRange addr = 1;
  uint32 value = 2;
}
message RomU64 {
  RomRange addr = 1;
  uint64 value = 2;
}
message RomF32 {
  RomRange addr = 1;
  uint32 value = 2;
}
message RomF64 {
  RomRange addr = 1;
  uint64 value = 2;
}

enum GameConsole {
  UNKNOWN_GAME_CONSOLE = 0x00;

  GAME_BOY = 0x01;
  GAME_BOY_COLOR = 0x02;
  GAME_BOY_ADVANCE = 0x04;

  GAME_GEAR = 0x20;

  PLAYSTATION_1 = 0x30;
  NINTENDO_64 = 0x40;

  DREAMCAST = 0x41;
  GAMECUBE = 0x42;
}

enum RomFormat {
  UNKNOWN_ROM_FORMAT = 0x00;

  // GameShark, Action Replay, Equalizer, and Game Buster all use the same ROM format.
  N64_GAMESHARK = 0x01;

  // AKA "Xploder 64"
  N64_XPLORER64 = 0x02;

  // GB Hunter and Game Booster use the same ROM format.
  N64_GBHUNTER = 0x03;

  GBC_CODEBREAKER = 0x41;

  // Monster Brain and Brain Boy use the same ROM format.
  GBC_MONSTERBRAIN = 0x42;

  // Action Replay too
  GBC_GAMESHARK = 0x51;

  // AKA "Xplorer GB"
  GBC_XPLODER = 0x6A;

  // Email client
  GBC_SHARK_MX = 0x6F;

  // GBA GameShark made by Datel/InterAct (earlier generations).
  GBA_GAMESHARK_DATEL = 0x81;

  // GBA GameShark made by Blaze/FCD (later generations).
  //
  // - GBA Code Breaker Lite: R1 prototype (2001-10-19)
  // - GBA Code Breaker Lite: R1 prototype (2002-11-15)
  // - GBA GameShark Pro SP: MadCatz (2003-08-21)
  // - GBA GameShark Pro SP: karabiner (2006-06-14)
  GBA_GAMESHARK_FCD = 0x82;

  GBA_TV_TUNER = 0x8A;
}

enum RomBrand {
  UNKNOWN_BRAND = 0x00;
  GAMESHARK = 0x01;
  ACTION_REPLAY = 0x02;
  EQUALIZER = 0x03;
  GAME_BUSTER = 0x04;
  GB_HUNTER = 0x05;
  GAME_BOOSTER = 0x06;
  CODE_BREAKER = 0x07;
  XPLODER = 0x08;
  XPLORER = 0x09;
  GAME_GENIE = 0x0A;
  SHARK_MX = 0x0B;
  BRAINBOY = 0x0C;
  MONSTER_BRAIN = 0x0D;
}

message ChecksumResult {
  bytes crc32_bytes = 1;
  bytes crc32_string = 2;

  bytes crc32c_bytes = 3;
  bytes crc32c_string = 4;

  bytes md5_bytes = 5;
  bytes md5_string = 6;

  bytes sha1_bytes = 7;
  bytes sha1_string = 8;
}

message RomMetadata {
  string file_path = 1;
  GameConsole console = 2;
  RomFormat format = 3;
  RomBrand brand = 4;

  // Human-friendly version number displayed to users in a UI, including a
  // "v" prefix if applicable.
  // E.g., "v1.0b", "v3.3 Lite", "R1 Prototype".
  string display_version = 5;

  // Machine-readable version number for sorting purposes.
  double sortable_version = 6;

  // Raw, unprocessed build date found in the ROM file.
  RomString build_date_raw = 7;

  // ISO 8601 date/time stamp of when the ROM was built.
  // E.g., "1997-08-01T12:50:00+0100".
  string build_date_iso = 8;
  .google.protobuf.Timestamp build_date_proto = 14;

  // Case-insensitive IETF BCP 47 language and region tag.
  // E.g., "en-US", "en-GB", "fr-CA", "de-DE".
  // See RFC 5646 (obsoletes RFC 4646).
  string language_ietf_code = 9;

  ChecksumResult file_checksum = 10;
  ChecksumResult firmware_checksum = 11;

  repeated RomString identifiers = 12;

  // Whether the ROM's firmware version is found in Hammerhead's internal
  // database of known versions.
  bool is_known_version = 13;
}

message Warning {
  string message = 1;
}

message Code {
  bytes bytes = 1;
  string comment = 2;
}

message Cheat {
  RomString cheat_name = 1;
  repeated Code codes = 2;
  bool is_cheat_active = 3;
}

message Game {
  RomString game_name = 1;
  repeated Cheat cheats = 2;
  bool is_game_active = 3;
  repeated Warning warnings = 4;
}
